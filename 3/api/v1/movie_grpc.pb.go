// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieClient is the client API for Movie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieClient interface {
	GetMovieByIMDBID(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*MovieDetail, error)
	SearchMovieByName(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (Movie_SearchMovieByNameClient, error)
}

type movieClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieClient(cc grpc.ClientConnInterface) MovieClient {
	return &movieClient{cc}
}

func (c *movieClient) GetMovieByIMDBID(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*MovieDetail, error) {
	out := new(MovieDetail)
	err := c.cc.Invoke(ctx, "/api.Movie/GetMovieByIMDBID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieClient) SearchMovieByName(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (Movie_SearchMovieByNameClient, error) {
	stream, err := c.cc.NewStream(ctx, &Movie_ServiceDesc.Streams[0], "/api.Movie/SearchMovieByName", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieSearchMovieByNameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Movie_SearchMovieByNameClient interface {
	Recv() (*MovieDetail, error)
	grpc.ClientStream
}

type movieSearchMovieByNameClient struct {
	grpc.ClientStream
}

func (x *movieSearchMovieByNameClient) Recv() (*MovieDetail, error) {
	m := new(MovieDetail)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MovieServer is the server API for Movie service.
// All implementations must embed UnimplementedMovieServer
// for forward compatibility
type MovieServer interface {
	GetMovieByIMDBID(context.Context, *MovieRequest) (*MovieDetail, error)
	SearchMovieByName(*MovieRequest, Movie_SearchMovieByNameServer) error
	mustEmbedUnimplementedMovieServer()
}

// UnimplementedMovieServer must be embedded to have forward compatible implementations.
type UnimplementedMovieServer struct {
}

func (UnimplementedMovieServer) GetMovieByIMDBID(context.Context, *MovieRequest) (*MovieDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieByIMDBID not implemented")
}
func (UnimplementedMovieServer) SearchMovieByName(*MovieRequest, Movie_SearchMovieByNameServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchMovieByName not implemented")
}
func (UnimplementedMovieServer) mustEmbedUnimplementedMovieServer() {}

// UnsafeMovieServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServer will
// result in compilation errors.
type UnsafeMovieServer interface {
	mustEmbedUnimplementedMovieServer()
}

func RegisterMovieServer(s grpc.ServiceRegistrar, srv MovieServer) {
	s.RegisterService(&Movie_ServiceDesc, srv)
}

func _Movie_GetMovieByIMDBID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServer).GetMovieByIMDBID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Movie/GetMovieByIMDBID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServer).GetMovieByIMDBID(ctx, req.(*MovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Movie_SearchMovieByName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MovieRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieServer).SearchMovieByName(m, &movieSearchMovieByNameServer{stream})
}

type Movie_SearchMovieByNameServer interface {
	Send(*MovieDetail) error
	grpc.ServerStream
}

type movieSearchMovieByNameServer struct {
	grpc.ServerStream
}

func (x *movieSearchMovieByNameServer) Send(m *MovieDetail) error {
	return x.ServerStream.SendMsg(m)
}

// Movie_ServiceDesc is the grpc.ServiceDesc for Movie service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Movie_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Movie",
	HandlerType: (*MovieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovieByIMDBID",
			Handler:    _Movie_GetMovieByIMDBID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchMovieByName",
			Handler:       _Movie_SearchMovieByName_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/movie.proto",
}
